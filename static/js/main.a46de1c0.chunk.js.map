{"version":3,"sources":["App.tsx","timer.ts","serviceWorker.ts","index.tsx"],"names":["require","Highcharts","tzOffset","Date","getTimezoneOffset","getSeries","feeds","selector","map","f","d","created_at","UTC","parseInt","substring","parseFloat","App","fn","timeout","useState","setFeeds","setChannel","useEffect","url","undefined","now","fetch","then","data","json","channel","currentFeed","lastFeed","length","entry_id","concat","timerId","setInterval","clearInterval","className","highcharts","allowChartUpdate","containerProps","style","height","options","title","colors","chart","type","zoomType","events","load","rangeSelector","buttons","count","text","inputEnabled","selected","plotOptions","line","gapSize","series","marker","radius","animation","step","turboThrehold","borderWidth","xAxis","yAxis","id","opposite","lineWidth","min","max","labels","format","exporting","enabled","csv","dateFormat","allowHTML","contextButton","menuItems","legend","navigator","baseSeries","includeInCSVExport","tooltip","crosshairs","index","name","field1","valueDecimals","valueSuffix","field2","field3","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a46de1c0.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\n\nimport { useRecurringTimer } from './timer';\n\nrequire(\"highcharts/modules/exporting\")(Highcharts);\nrequire(\"highcharts/modules/export-data\")(Highcharts);\n\ntype Index = 'field1' | 'field2' | 'field3'\ntype FromIndex = { [index in Index]: string }\n\ninterface Feed extends FromIndex {\n  entry_id: number\n  created_at: string\n}\n\ninterface Channel extends FromIndex {\n  id: number\n  name: string\n  latitude: string\n  longitude: string\n  field1: string\n  field2: string\n  field3: string\n  created_at: string\n  updated_at: string\n  last_entry_id: number\n};\n\nconst channelId = 164534;\nconst apiKey = undefined;\nconst rounding = 3;\nconst numResults = 2160;\n\nconst tzOffset = new Date().getTimezoneOffset() * 60000;\n\nconst getChartDate = (d: string)  => \n  Date.UTC(\n    parseInt(d.substring(0, 4)),\n    parseInt(d.substring(5, 7)) - 1,\n    parseInt(d.substring(8, 10)),\n    parseInt(d.substring(11, 13)),\n    parseInt(d.substring(14, 16)),\n    parseInt(d.substring(17, 19))) - tzOffset;\n\nconst getSeries = (feeds: Feed[], selector: (fi: FromIndex) => string): number[][] => \n  feeds.map(f => [getChartDate(f.created_at), parseFloat(selector(f))]);\n\nconst App = () => {\n  \n  const [feeds, setFeeds] = useState<Feed[]>([]);\n  const [channel, setChannel] = useState<Channel | undefined>();\n  \n  useEffect(() => {\n    const url = `https://api.thingspeak.com/channels/${channelId}/feed.json?round=${rounding}&results=${numResults}&api_key=${apiKey}&_=${Date.now()}`\n    fetch(url)\n    .then(data => data.json())\n    .then(({feeds, channel}) => {\n      setFeeds(feeds);\n      setChannel(channel);\n    });\n  }, []);\n  \n  useRecurringTimer(() => {\n    const url = `https://api.thingspeak.com/channels/${channelId}/feed/last.json?round=${rounding}&api_key=${apiKey}&location=false&_=${Date.now()}`\n    fetch(url)\n    .then(data => data.json())\n    .then((currentFeed: Feed) => {\n      const lastFeed = feeds[feeds.length - 1];\n      if (currentFeed.entry_id > lastFeed.entry_id) {\n        setFeeds(feeds.concat([currentFeed]));        \n      }\n    });\n  }, 30000);\n  \n  return (\n    <div className=\"App\">\n        <HighchartsReact\n          highcharts={Highcharts}\n          allowChartUpdate\n          containerProps={{style: {height: '600px'}}}\n          options={{\n            title: null,\n            colors: ['#7cb5ec', '#492970', '#90ed7d', '#f7a35c', '#8085e9', '#f15c80', '#e4d354', '#2b908f', '#f45b5b', '#91e8e1'],\n            chart: {\n              type: 'spline',\n              zoomType: 'xy',\n              events: {\n                load: function() {\n                }\n              }\n            },\n            rangeSelector: {\n              buttons: [\n                { count: 30, type: 'minute', text: '30M' },\n                { count:  2, type: 'hour',   text: '2H' },\n                { count:  6, type: 'hour',   text: '6H' },\n                { count: 12, type: 'hour',   text: '12H' },\n                { count:  1, type: 'day',    text: 'D' },\n                { count:  1, type: 'week',   text: 'W' },\n                { count:  1, type: 'month',  text: 'M' },\n                { count:  1, type: 'year',   text: 'Y' },\n                {            type: 'all', text: 'All' }\n              ],\n              inputEnabled: true,\n              selected: 4\n            },\n            plotOptions: {\n              line: {\n                gapSize: 5\n              },\n              series: {\n                marker: {\n                  radius: 2\n                },\n                animation: true,\n                step: false,\n                turboThrehold: 1000,\n                borderWidth: 0\n              }\n            },\n            xAxis: {\n              type: 'datetime',\n              title: {\n                text: 'Time'\n              }\n            },\n            yAxis: [\n              { id: 'T', title: { text: 'Temperature (°C)' }, opposite: false, lineWidth: 1, min: 5, max: 30, labels: { format: '{value:.2f}' } },\n              { id: 'H', title: { text: 'Humidity (% rH)' }, opposite: true, lineWidth: 1, min: 0, max: 100, labels: { format: '{value:.2f}' } },\n              { id: 'P', title: { text: 'Pressure (hPa)' }, opposite: true, lineWidth: 1, min: 972, max: 1032, labels: { format: '{value:.2f}' } }\n            ],\n            exporting: {\n              enabled: true,\n              csv: {\n                dateFormat: '%d/%m/%Y %I:%M:%S %p'\n              },\n              allowHTML: true,\n              buttons: {\n                contextButton: {\n                  menuItems: [\"viewFullscreen\"]\n                }\n              }            \n            },\n            legend: {\n              enabled: true\n            },\n            navigator: {\n              baseSeries: 0,\n              series: {\n                includeInCSVExport: false\n              }\n            },\n            tooltip: {\n              crosshairs: [false, true]\n            },\n            series: [{\n              index: 0,\n              yAxis: 'T',\n              name: 'Temperature',\n              data: getSeries(feeds, f => f.field1),\n              tooltip: {\n                valueDecimals: 2,\n                valueSuffix: ' °C'\n              }\n            },\n            {\n              index: 1,\n              yAxis: 'H',\n              name: 'Humidity',\n              data: getSeries(feeds, f => f.field2),\n              tooltip: {\n                valueDecimals: 1,\n                valueSuffix: '  % rH'\n              }\n            },\n            {\n              index: 2,\n              yAxis: 'P',\n              name: 'Pressure',\n              data: getSeries(feeds, f => f.field3),\n              tooltip: {\n                valueDecimals: 1,\n                valueSuffix: '  % rH'\n              }\n            },\n          ]\n          }}\n        />\n    </div>\n  );\n}\n\nexport default App;\n","import { useEffect } from 'react';\n\nexport function useRecurringTimer(fn: (...args: any[]) => void, timeout: number) {\n    useEffect(() => {\n        const timerId = setInterval(fn, timeout);\n        return function cleanup() {\n            clearInterval(timerId);\n        };\n    });\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}