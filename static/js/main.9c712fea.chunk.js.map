{"version":3,"sources":["ThingspeakChart.tsx","timer.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["require","Highcharts","tzOffset","Date","getTimezoneOffset","getSeriesData","feeds","index","map","f","d","created_at","UTC","parseInt","substring","parseFloat","getSeriesName","channel","pos","indexOf","substr","getSeriesUnit","startPos","endPos","undefined","ThingspeakChart","props","fn","timeout","useState","setFeeds","setChannel","useEffect","url","channelId","rounding","apiKey","now","fetch","then","data","json","currentFeed","entry_id","last_entry_id","updated_at","timerId","setInterval","clearInterval","highcharts","allowChartUpdate","containerProps","style","height","options","title","name","colors","chart","type","zoomType","events","load","rangeSelector","enabled","buttons","count","text","inputEnabled","selected","plotOptions","line","gapSize","series","marker","radius","animation","step","turboThrehold","borderWidth","xAxis","yAxis","id","field1","opposite","lineWidth","min","max","labels","format","field2","field3","exporting","csv","dateFormat","allowHTML","contextButton","menuItems","legend","navigator","baseSeries","includeInCSVExport","tooltip","crosshairs","valueDecimals","valueSuffix","className","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9c712fea.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Highcharts from 'highcharts/highstock';\nimport HighchartsReact from 'highcharts-react-official';\n\nimport { useRecurringTimer } from './timer';\n\nrequire(\"highcharts/modules/exporting\")(Highcharts);\nrequire(\"highcharts/modules/export-data\")(Highcharts);\n\ntype Index = 'field1' | 'field2' | 'field3'\ntype FromIndex = { [index in Index]: string }\n\ninterface Feed extends FromIndex {\n  entry_id: number\n  created_at: string\n}\n\ninterface Channel extends FromIndex {\n  id: number\n  name: string\n  latitude: string\n  longitude: string\n  created_at: string\n  updated_at: string\n  last_entry_id: number\n};\n\n\nconst numResults = 2880;\n\nconst tzOffset = new Date().getTimezoneOffset() * 60000;\n\nconst getChartDate = (d: string)  => \n  Date.UTC(\n    parseInt(d.substring(0, 4)),\n    parseInt(d.substring(5, 7)) - 1,\n    parseInt(d.substring(8, 10)),\n    parseInt(d.substring(11, 13)),\n    parseInt(d.substring(14, 16)),\n    parseInt(d.substring(17, 19))) - tzOffset;\n\nconst getSeriesData = (feeds: Feed[], index: Index): number[][] => \n  feeds.map(f => [getChartDate(f.created_at), parseFloat(f[index])]);\n\n  \nconst getSeriesName = (channel: Channel | undefined, index: Index): string | undefined => {\n    if (!channel) return undefined;\n    const pos = channel[index].indexOf(' (');\n    return pos > 0 ? channel[index].substr(0, pos) : channel[index];\n}\n  \nconst getSeriesUnit = (channel: Channel | undefined, index: Index): string | undefined => {\n  if (!channel) return undefined;\n  const startPos = channel[index].indexOf(' (');\n  if (startPos < 0) return undefined;\n  const endPos = channel[index].indexOf(')', startPos + 2);\n  return endPos > 0 ? channel[index].substr(startPos + 2, endPos - startPos - 2) : undefined;\n  \n}\n\nexport type ThingspeakChartProps = {\n  channelId: number\n  rounding: number | undefined\n  apiKey: string\n}\n  \nconst ThingspeakChart = (props: ThingspeakChartProps) => {\n  \n  const [feeds, setFeeds] = useState<Feed[]>([]);\n  const [channel, setChannel] = useState<Channel | undefined>();\n\n  useEffect(() => {\n    const url = `https://api.thingspeak.com/channels/${props.channelId}/feed.json?round=${props.rounding}&results=${numResults}&api_key=${props.apiKey}&_=${Date.now()}`\n    fetch(url)\n      .then(data => data.json())\n      .then(({feeds, channel}) => {\n        setFeeds(feeds);\n        setChannel(channel);\n      });\n  }, [props.channelId, props.rounding, props.apiKey]);\n  \n  useRecurringTimer(() => {\n    const url = `https://api.thingspeak.com/channels/${props.channelId}/feed/last.json?round=${props.rounding}&api_key=${props.apiKey}&location=false&_=${Date.now()}`\n    fetch(url)\n      .then(data => data.json())\n      .then((currentFeed: Feed) => {\n        if (channel && currentFeed.entry_id > channel.last_entry_id) {\n          setFeeds([...feeds, currentFeed]);  \n          setChannel({\n            ...channel, \n            updated_at: currentFeed.created_at, \n            last_entry_id: currentFeed.entry_id\n          });\n        }\n      });\n  }, 30000);\n  \n  if (!channel) {\n    return (\n      <div className=\"please-wait\">\n        Loading: please wait...\n      </div>\n    );\n  }\n  \n  return (\n    <HighchartsReact\n      highcharts={Highcharts}\n      allowChartUpdate\n      containerProps={{style: {height: '600px'}}}\n      options={{\n        title: channel?.name,\n        colors: ['#7cb5ec', '#492970', '#90ed7d', '#f7a35c', '#8085e9', '#f15c80', '#e4d354', '#2b908f', '#f45b5b', '#91e8e1'],\n        chart: {\n          type: 'spline',\n          zoomType: 'xy',\n          events: {\n            load: function() {\n            }\n          }\n        },\n        rangeSelector: {\n          enabled: true,\n          buttons: [\n            { count: 30, type: 'minute', text: '30M' },\n            { count:  2, type: 'hour',   text: '2H' },\n            { count:  6, type: 'hour',   text: '6H' },\n            { count: 12, type: 'hour',   text: '12H' },\n            { count:  1, type: 'day',    text: 'D' },\n            { count:  1, type: 'week',   text: 'W' },\n            { count:  1, type: 'month',  text: 'M' },\n            { count:  1, type: 'year',   text: 'Y' },\n            {            type: 'all', text: 'All' }\n          ],\n          inputEnabled: true,\n          selected: 4\n        },\n        plotOptions: {\n          line: {\n            gapSize: 5\n          },\n          series: {\n            marker: {\n              radius: 2\n            },\n            animation: true,\n            step: false,\n            turboThrehold: 1000,\n            borderWidth: 0\n          }\n        },\n        xAxis: {\n          type: 'datetime',\n          title: {\n            text: 'Time'\n          }\n        },\n        yAxis: [\n          { id: 'T', title: { text: channel?.field1 }, opposite: false, lineWidth: 1, min: 5, max: 30, labels: { format: '{value:.2f}' } },\n          { id: 'H', title: { text: channel?.field2 }, opposite: true, lineWidth: 1, min: 0, max: 100, labels: { format: '{value:.2f}' } },\n          { id: 'P', title: { text: channel?.field3 }, opposite: true, lineWidth: 1, min: 972, max: 1032, labels: { format: '{value:.2f}' } }\n        ],\n        exporting: {\n          enabled: true,\n          csv: {\n            dateFormat: '%d/%m/%Y %I:%M:%S %p'\n          },\n          allowHTML: true,\n          buttons: {\n            contextButton: {\n              menuItems: [\"viewFullscreen\"]\n            }\n          }            \n        },\n        legend: {\n          enabled: !!channel\n        },\n        navigator: {\n          baseSeries: 0,\n          series: {\n            includeInCSVExport: false\n          }\n        },\n        tooltip: {\n          crosshairs: [true, false]\n        },\n        series: [{\n          index: 0,\n          yAxis: 'T',\n          name: getSeriesName(channel, 'field1'),\n          data: getSeriesData(feeds, 'field1'),\n          tooltip: {\n            valueDecimals: 2,\n            valueSuffix: ` ${getSeriesUnit(channel, 'field1')}`\n          }\n        },\n        {\n          index: 1,\n          yAxis: 'H',\n          name: getSeriesName(channel, 'field2'),\n          data: getSeriesData(feeds, 'field2'),\n          tooltip: {\n            valueDecimals: 1,\n            valueSuffix: ` ${getSeriesUnit(channel, 'field2')}`\n          }\n        },\n        {\n          index: 2,\n          yAxis: 'P',\n          name: getSeriesName(channel, 'field3'),\n          data: getSeriesData(feeds, 'field3'),\n          tooltip: {\n            valueDecimals: 1,\n            valueSuffix:  ` ${getSeriesUnit(channel, 'field3')}`\n          }\n        },\n      ]\n      }}\n    />\n  );\n}\n\nexport default ThingspeakChart;\n","import { useEffect } from 'react';\n\nexport function useRecurringTimer(fn: (...args: any[]) => void, timeout: number) {\n    useEffect(() => {\n        const timerId = setInterval(fn, timeout);\n        return function cleanup() {\n            clearInterval(timerId);\n        };\n    }, [fn, timeout]);\n}","import React from 'react';\nimport './App.css';\n\nimport ThingspeakChart from './ThingspeakChart';\n\nconst App = () => {\n    \n  return (\n    <div className=\"App\">\n        <ThingspeakChart apiKey=\"XXXX\" channelId={164534} rounding={3} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}